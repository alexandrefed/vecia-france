---
import { getLocaleData } from '@lib/i18n';
import Button from '@components/common/Button.astro';
import type { Locale } from '@lib/i18n';

export interface Props {
  locale: Locale;
}

const { locale } = Astro.props;
const t = getLocaleData(locale);

const navItems = [
  { href: '/', label: t.nav.home },
  { href: '/about', label: t.nav.about },
  { href: '/blog', label: t.nav.blog },
];
---

<header id="navigation" class="fixed top-0 left-0 right-0 z-50 transition-all duration-300">
  <nav class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-20 md:h-24">
      <!-- Logo -->
      <a href="/" class="flex items-center gap-3">
        <img 
          src="/images/vecia-logo-cropped.png" 
          alt="Vecia" 
          class="h-16 md:h-20 w-auto hover:scale-105 transition-transform duration-300"
          loading="eager"
          decoding="async"
          fetchpriority="high"
        />
        <span class="hidden sm:block font-display font-bold text-2xl md:text-3xl text-dark">Vecia</span>
      </a>
      
      <!-- Desktop Navigation and Actions -->
      <div class="hidden lg:flex items-center space-x-10">
        {navItems.map(item => (
          <a 
            href={item.href}
            class="relative text-dark hover:text-primary transition-colors duration-300 font-medium text-lg group"
          >
            <span class="relative z-10">{item.label}</span>
            <span class="absolute bottom-0 left-0 w-full h-0.5 bg-primary transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left"></span>
          </a>
        ))}
        
        <Button 
          href="/contact"
          size="sm"
          class="ml-6"
        >
          {t.nav.contact}
        </Button>
      </div>
      
      <!-- Mobile Menu Button -->
      <button 
        id="mobile-menu-toggle"
        class="lg:hidden p-2 rounded-lg hover:bg-gray-100"
        aria-label="Toggle menu"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
    
    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="hidden lg:hidden py-4 border-t border-gray-100">
      <div class="flex flex-col space-y-3">
        {navItems.map(item => (
          <a 
            href={item.href}
            class="text-gray-700 hover:text-primary transition-colors duration-200 font-medium py-2"
          >
            {item.label}
          </a>
        ))}
        <Button 
          href="/contact"
          size="sm"
          class="mt-4 w-full"
        >
          {t.nav.contact}
        </Button>
      </div>
    </div>
  </nav>
</header>

<script>
  // Mobile menu toggle
  const toggle = document.getElementById('mobile-menu-toggle');
  const menu = document.getElementById('mobile-menu');
  
  toggle?.addEventListener('click', () => {
    menu?.classList.toggle('hidden');
  });
  
  // Scroll effects for navigation
  const navigation = document.getElementById('navigation');
  let lastScrollY = 0;
  
  const updateNavigation = () => {
    const scrollY = window.scrollY;
    
    // Add background and shadow when scrolled
    if (scrollY > 50) {
      navigation?.classList.add('bg-white/95', 'backdrop-blur-md', 'shadow-md');
      navigation?.classList.remove('bg-transparent');
    } else {
      navigation?.classList.remove('bg-white/95', 'backdrop-blur-md', 'shadow-md');
      navigation?.classList.add('bg-transparent');
    }
    
    // Hide/show navigation on scroll
    if (scrollY > lastScrollY && scrollY > 100) {
      // Scrolling down
      navigation?.classList.add('-translate-y-full');
    } else {
      // Scrolling up
      navigation?.classList.remove('-translate-y-full');
    }
    
    lastScrollY = scrollY;
  };
  
  // Throttle scroll events
  let ticking = false;
  const handleScroll = () => {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        updateNavigation();
        ticking = false;
      });
      ticking = true;
    }
  };
  
  window.addEventListener('scroll', handleScroll);
  updateNavigation(); // Initial state
</script>